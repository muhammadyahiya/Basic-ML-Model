{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled25.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMb16x6+75vCgJZEYYqyZp/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/muhammadyahiya/Basic-ML-Model/blob/main/ML%20Model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WhWMpLbT5LDq"
      },
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fr9xjgdC5hR5"
      },
      "source": [
        "X = np.array([-1, 0, 1, 2, 3, 4], dtype=int)\n",
        "Y = np.array([-2, 1, 4, 7, 10, 13], dtype=int)"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rbc_95pL-TMw"
      },
      "source": [
        "model = tf.keras.Sequential([keras.layers.Dense(units = 1, input_shape =[1])])"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z85x6rt4-O1E"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AFajbA2o6dao"
      },
      "source": [
        "model.compile(optimizer='sgd', loss='mse')"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X3VpNfqH7AmK",
        "outputId": "01eb675f-103a-4d32-c6fe-cadc7c607fdc"
      },
      "source": [
        "model.fit(X, Y, epochs= 50)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 6.2102\n",
            "Epoch 2/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 4.8863\n",
            "Epoch 3/50\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 3.8447\n",
            "Epoch 4/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 3.0252\n",
            "Epoch 5/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 2.3805\n",
            "Epoch 6/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 1.8732\n",
            "Epoch 7/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 1.4741\n",
            "Epoch 8/50\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 1.1601\n",
            "Epoch 9/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.9131\n",
            "Epoch 10/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.7187\n",
            "Epoch 11/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.5658\n",
            "Epoch 12/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.4455\n",
            "Epoch 13/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.3508\n",
            "Epoch 14/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.2763\n",
            "Epoch 15/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.2177\n",
            "Epoch 16/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.1716\n",
            "Epoch 17/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.1353\n",
            "Epoch 18/50\n",
            "1/1 [==============================] - 0s 11ms/step - loss: 0.1067\n",
            "Epoch 19/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.0843\n",
            "Epoch 20/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.0666\n",
            "Epoch 21/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.0526\n",
            "Epoch 22/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0417\n",
            "Epoch 23/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0331\n",
            "Epoch 24/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.0263\n",
            "Epoch 25/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.0209\n",
            "Epoch 26/50\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.0167\n",
            "Epoch 27/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0134\n",
            "Epoch 28/50\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.0108\n",
            "Epoch 29/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0087\n",
            "Epoch 30/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0071\n",
            "Epoch 31/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0058\n",
            "Epoch 32/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0048\n",
            "Epoch 33/50\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.0040\n",
            "Epoch 34/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0033\n",
            "Epoch 35/50\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.0028\n",
            "Epoch 36/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0024\n",
            "Epoch 37/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0021\n",
            "Epoch 38/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0018\n",
            "Epoch 39/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0016\n",
            "Epoch 40/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0015\n",
            "Epoch 41/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0013\n",
            "Epoch 42/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0012\n",
            "Epoch 43/50\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.0011\n",
            "Epoch 44/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0011\n",
            "Epoch 45/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.0010\n",
            "Epoch 46/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 9.5545e-04\n",
            "Epoch 47/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 9.1124e-04\n",
            "Epoch 48/50\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 8.7319e-04\n",
            "Epoch 49/50\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 8.4004e-04\n",
            "Epoch 50/50\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 8.1081e-04\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f7f7cde7a90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pW4Nwkol_Kfn",
        "outputId": "9aecbc7d-47ac-4149-a674-83f6f8340bac"
      },
      "source": [
        "print(model.predict([10.0]))"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[30.89384]]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}